// Generated automatically by ProvToolbox for template configuration 'template_library'
// by class org.openprovenance.prov.template.compiler.CompilerConfigurations, method generateConfigurator,
// in file CompilerConfigurations.java, at line 63
package org.openprovenance.prov.service.dispatch;

import org.openprovenance.prov.client.ProcessorArgsInterface;
import org.openprovenance.prov.template.library.plead.client.common.*;
import org.openprovenance.prov.template.library.plead.client.configurator.TableConfigurator;
import org.openprovenance.prov.template.library.plead.client.integrator.*;

public class Enactor2CsvConfigurator implements TableConfigurator<ProcessorArgsInterface<?>> {
  private final InputOutputProcessor beanEnactor;

  public Enactor2CsvConfigurator(InputOutputProcessor beanEnactor) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerConfigurations, method generateConfigurator
    // in file CompilerConfigurations.java, at line 78
    this.beanEnactor=beanEnactor;
  }

  public final ProcessorArgsInterface<?> plead_transforming(Plead_transformingBuilder builder) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerConfigurations, method generateConfigurator
    // in file CompilerConfigurations.java, at line 98
    // Generated Automatically by ProvToolbox method org.openprovenance.prov.template.compiler.CompilerConfigurations.generateMethodEnactor2()
    ProcessorArgsInterface<Plead_transformingInputs> beanConverter=builder.getIntegrator().aRecord2InputsConverter;
    ProcessorArgsInterface<Plead_transformingOutputs> enactor=(array) -> {
                            Plead_transformingInputs bean=beanConverter.process(array);
                            return beanEnactor.process(bean);
                        };
    return enactor;
  }

  public final ProcessorArgsInterface<?> plead_filtering(Plead_filteringBuilder builder) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerConfigurations, method generateConfigurator
    // in file CompilerConfigurations.java, at line 98
    // Generated Automatically by ProvToolbox method org.openprovenance.prov.template.compiler.CompilerConfigurations.generateMethodEnactor2()
    ProcessorArgsInterface<Plead_filteringInputs> beanConverter=builder.getIntegrator().aRecord2InputsConverter;
    ProcessorArgsInterface<Plead_filteringOutputs> enactor=(array) -> {
                            Plead_filteringInputs bean=beanConverter.process(array);
                            return beanEnactor.process(bean);
                        };
    return enactor;
  }

  public final ProcessorArgsInterface<?> plead_training(Plead_trainingBuilder builder) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerConfigurations, method generateConfigurator
    // in file CompilerConfigurations.java, at line 98
    // Generated Automatically by ProvToolbox method org.openprovenance.prov.template.compiler.CompilerConfigurations.generateMethodEnactor2()
    ProcessorArgsInterface<Plead_trainingInputs> beanConverter=builder.getIntegrator().aRecord2InputsConverter;
    ProcessorArgsInterface<Plead_trainingOutputs> enactor=(array) -> {
                            Plead_trainingInputs bean=beanConverter.process(array);
                            return beanEnactor.process(bean);
                        };
    return enactor;
  }

  public final ProcessorArgsInterface<?> plead_validating(Plead_validatingBuilder builder) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerConfigurations, method generateConfigurator
    // in file CompilerConfigurations.java, at line 98
    // Generated Automatically by ProvToolbox method org.openprovenance.prov.template.compiler.CompilerConfigurations.generateMethodEnactor2()
    ProcessorArgsInterface<Plead_validatingInputs> beanConverter=builder.getIntegrator().aRecord2InputsConverter;
    ProcessorArgsInterface<Plead_validatingOutputs> enactor=(array) -> {
                            Plead_validatingInputs bean=beanConverter.process(array);
                            return beanEnactor.process(bean);
                        };
    return enactor;
  }

  public final ProcessorArgsInterface<?> plead_approving(Plead_approvingBuilder builder) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerConfigurations, method generateConfigurator
    // in file CompilerConfigurations.java, at line 98
    // Generated Automatically by ProvToolbox method org.openprovenance.prov.template.compiler.CompilerConfigurations.generateMethodEnactor2()
    ProcessorArgsInterface<Plead_approvingInputs> beanConverter=builder.getIntegrator().aRecord2InputsConverter;
    ProcessorArgsInterface<Plead_approvingOutputs> enactor=(array) -> {
                            Plead_approvingInputs bean=beanConverter.process(array);
                            return beanEnactor.process(bean);
                        };
    return enactor;
  }

  public final ProcessorArgsInterface<?> plead_splitting(Plead_splittingBuilder builder) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerConfigurations, method generateConfigurator
    // in file CompilerConfigurations.java, at line 98
    // Generated Automatically by ProvToolbox method org.openprovenance.prov.template.compiler.CompilerConfigurations.generateMethodEnactor2()
    ProcessorArgsInterface<Plead_splittingInputs> beanConverter=builder.getIntegrator().aRecord2InputsConverter;
    ProcessorArgsInterface<Plead_splittingOutputs> enactor=(array) -> {
                            Plead_splittingInputs bean=beanConverter.process(array);
                            return beanEnactor.process(bean);
                        };
    return enactor;
  }

  public final ProcessorArgsInterface<?> plead_transforming_composite(
      Plead_transforming_compositeBuilder builder) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerConfigurations, method generateConfigurator
    // in file CompilerConfigurations.java, at line 98
    return null;
  }
}
