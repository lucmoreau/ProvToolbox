// Generated automatically by ProvToolbox for template 'template_block'
// by class org.openprovenance.prov.template.compiler.expansion.CompilerExpansionBuilder, method generateBuilderSpecification_aux,
// in file CompilerExpansionBuilder.java, at line 119
package org.example.templates.block;

import java.lang.Integer;
import java.lang.Object;
import java.lang.String;
import java.util.Collection;
import java.util.LinkedList;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.text.StringSubstitutor;
import org.openprovenance.prov.client.Builder;
import org.openprovenance.prov.model.Attribute;
import org.openprovenance.prov.model.Bundle;
import org.openprovenance.prov.model.Document;
import org.openprovenance.prov.model.Namespace;
import org.openprovenance.prov.model.ProvFactory;
import org.openprovenance.prov.model.ProvUtilities;
import org.openprovenance.prov.model.QualifiedName;
import org.openprovenance.prov.model.ValueConverter;
import org.openprovenance.prov.template.expander.ExpandAction;
import org.openprovenance.prov.template.log2prov.FileBuilder;
import org.openprovenance.prov.template.log2prov.interfaces.ProxyClientAccessorInterface;

public class Template_blockBuilder extends FileBuilder implements ProxyClientAccessorInterface {
  private final ProvFactory pf;

  private final ValueConverter vc;

  public final QualifiedName _Q_tmpl_activity;

  public final QualifiedName _Q_ex_DerivationConsumed2;

  public final QualifiedName _Q_ex_DerivationConsumed1;

  public final QualifiedName _Q_prov_value;

  public final QualifiedName _Q_ex_value;

  public final QualifiedName _Q_ex_test;

  public final QualifiedName _Q_tmpl_activityType;

  public final QualifiedName _Q_prov_type;

  public final QualifiedName _Q_prov_QUALIFIED_NAME;

  public final QualifiedName _Q_bn_n0;

  public final QualifiedName _Q_bn_n1;

  public final QualifiedName _Q_prov_label;

  public Template_blockBuilder(ProvFactory pf) {
    this.pf = pf;
    this._Q_ex_value = pf.newQualifiedName("http://example.org/","value","ex");
    this._Q_ex_DerivationConsumed1 = pf.newQualifiedName("http://example.org/","DerivationConsumed1","ex");
    this._Q_ex_DerivationConsumed2 = pf.newQualifiedName("http://example.org/","DerivationConsumed2","ex");
    this._Q_tmpl_activity = pf.newQualifiedName("http://openprovenance.org/tmpl#","activity","tmpl");
    this._Q_prov_QUALIFIED_NAME = pf.newQualifiedName("http://www.w3.org/ns/prov#","QUALIFIED_NAME","prov");
    this._Q_tmpl_activityType = pf.newQualifiedName("http://openprovenance.org/tmpl#","activityType","tmpl");
    this._Q_prov_type = pf.newQualifiedName("http://www.w3.org/ns/prov#","type","prov");
    this._Q_bn_n0 = pf.newQualifiedName("http://openprovenance.org/blank#","n0","bn");
    this._Q_prov_value = pf.newQualifiedName("http://www.w3.org/ns/prov#","value","prov");
    this._Q_prov_label = pf.newQualifiedName("http://www.w3.org/ns/prov#","label","prov");
    this._Q_bn_n1 = pf.newQualifiedName("http://openprovenance.org/blank#","n1","bn");
    this._Q_ex_test = pf.newQualifiedName("http://example.org/","test","ex");
    this.vc = new ValueConverter(pf);
    register(this);
  }

  public Document generator(QualifiedName agent, QualifiedName produced, QualifiedName b,
      QualifiedName consumed1, QualifiedName consumed2, QualifiedName operation,
      Object operation_type, Object consumed_value1, Object produced_value, Object consumed_value2,
      Object produced_type) {
    // Generated by method org.openprovenance.prov.template.compiler.expansion.CompilerExpansionBuilder.generateTemplateGenerator()
    QualifiedName nullqn = null;
    Collection<Attribute> attrs=null;
    Document __C_document = pf.newDocument();
    if (b==null) b=ExpandAction.getUUIDQualifiedName2(pf);
    Bundle b_ = pf.newNamedBundle(b,pf.newNamespace(),null);
    __C_document.getStatementOrBundle().add(b_);
    attrs=new LinkedList<Attribute>();
    if (produced_type!=null) attrs.add(pf.newAttribute(_Q_prov_type,produced_type,vc.getXsdType(produced_type)));
    if (produced_value!=null) attrs.add(pf.newAttribute(_Q_prov_value,produced_value,vc.getXsdType(produced_value)));
    if (produced!=null) b_.getStatement().add(pf.newEntity(produced, attrs));
    attrs=new LinkedList<Attribute>();
    if (consumed_value1!=null) attrs.add(pf.newAttribute(_Q_prov_value,consumed_value1,vc.getXsdType(consumed_value1)));
    if (consumed1!=null) b_.getStatement().add(pf.newEntity(consumed1, attrs));
    attrs=new LinkedList<Attribute>();
    if (consumed_value2!=null) attrs.add(pf.newAttribute(_Q_prov_value,consumed_value2,vc.getXsdType(consumed_value2)));
    if (consumed2!=null) b_.getStatement().add(pf.newEntity(consumed2, attrs));
    attrs=new LinkedList<Attribute>();
    if (operation_type!=null) attrs.add(pf.newAttribute(_Q_prov_type,operation_type,vc.getXsdType(operation_type)));
    if (operation!=null) b_.getStatement().add(pf.newActivity(operation,null,null, attrs));
    if (agent!=null) b_.getStatement().add(pf.newAgent(agent));
    if ((operation!=null) &&  (consumed1!=null)) b_.getStatement().add(pf.newUsed(nullqn,operation,consumed1,null));
    if ((operation!=null) &&  (consumed2!=null)) b_.getStatement().add(pf.newUsed(nullqn,operation,consumed2,null));
    if (produced!=null) b_.getStatement().add(pf.newWasGeneratedBy(nullqn,produced,operation));
    attrs=new LinkedList<Attribute>();
    attrs.add(pf.newAttribute(_Q_ex_test,_Q_ex_value,_Q_prov_QUALIFIED_NAME));
    if ((produced!=null) &&  (consumed1!=null)) b_.getStatement().add(pf.newWasDerivedFrom(nullqn,produced,consumed1,nullqn,nullqn,nullqn, attrs));
    attrs=new LinkedList<Attribute>();
    if ((produced!=null) &&  (consumed2!=null)) b_.getStatement().add(pf.newWasDerivedFrom(nullqn,produced,consumed2,nullqn,nullqn,nullqn, attrs));
    b_.getStatement().add(pf.newWasAssociatedWith(nullqn,operation,agent,nullqn));
    new ProvUtilities().updateNamespaces(__C_document);
    return __C_document;
  }

  public String getName() {
    // Generated by method org.openprovenance.prov.template.compiler.common.CompilerCommon.generateNameAccessor()
    return "template_block";
  }

  public Builder getClientBuilder() {
    // Generated by method org.openprovenance.prov.template.compiler.common.CompilerCommon.commonAccessorGenerator()
    return new org.example.templates.block.client.common.Template_blockBuilder();
  }

  public Template_blockBuilderTypeManagement getTypeManager(
      Map<QualifiedName, Set<String>> knownTypeMap, Map<QualifiedName, Set<String>> unknownTypeMap,
      Map<String, Map<String, BiFunction<Object, String, Collection<String>>>> propertyConverters,
      Map<QualifiedName, Collection<String>> idata,
      Map<String, Map<String, BiFunction<Object, String, Collection<String>>>> idataConverters) {
    // Generated by method org.openprovenance.prov.template.compiler.expansion.CompilerExpansionBuilder.typeManagerGenerator()
    return new Template_blockBuilderTypeManagement(knownTypeMap,unknownTypeMap,propertyConverters,idata,idataConverters);
  }

  public Template_blockBuilderTypedRecord getTypedRecord() {
    // Generated by method org.openprovenance.prov.template.compiler.common.CompilerCommon.typeRecordGenerator()
    return new Template_blockBuilderTypedRecord();
  }

  public void propagateTypes(Object[] record, Map<String, Integer> mapLevelN,
      Map<String, Collection<int[]>> mapLevelNP1, Map<String, Integer> mapLevel0,
      Map<String, Integer> uniqId) {
    // Generated by method org.openprovenance.prov.template.compiler.expansion.CompilerExpansionBuilder.generateTypePropagator()
    // {1=[], 2=[], 3=[], 4=[8, 9], 6=[8, 9], 8=[], 9=[]}
    // Variable: operation
    // Count: 1
    // No successor for: 1
    // 
    // Variable: operation_type
    // Count: 2
    // No successor for: 2
    // 
    // Variable: agent
    // Count: 3
    // No successor for: 3
    // 
    // Variable: consumed1
    // Count: 4
    // Identifiers: ['bn:{{http://openprovenance.org/blank#}}n0']
    // KnownTypes: [[http://example.org/DerivationConsumed1, http://www.w3.org/ns/prov#WasDerivedFrom]]
    // UnknownTypes: [[http://openprovenance.org/var#operation_type]]
    // ActivityTypes: [['var:{{http://openprovenance.org/var#}}operation_type', 'ex:{{http://example.org/}}DerivationConsumed1']]
    // Activities: [['var:{{http://openprovenance.org/var#}}operation']]
    // propagating for consumed1
    // URI: http://openprovenance.org/var#operation
    // Position: 1
    Integer l1a_4=mapLevel0.get("http://openprovenance.org/blank#n0." + ((QualifiedName)record[1]).getLocalPart());
    int l1b_4=(l1a_4==null)?-1:l1a_4;
    propagateTypes_n(record,mapLevelN,mapLevelNP1,4,8,9,l1b_4, uniqId);
    // 
    // 
    // Variable: consumed2
    // Count: 6
    // Identifiers: ['bn:{{http://openprovenance.org/blank#}}n1']
    // KnownTypes: [[http://example.org/DerivationConsumed2, http://www.w3.org/ns/prov#WasDerivedFrom]]
    // UnknownTypes: [[http://openprovenance.org/var#operation_type]]
    // ActivityTypes: [['var:{{http://openprovenance.org/var#}}operation_type', 'ex:{{http://example.org/}}DerivationConsumed2']]
    // Activities: [['var:{{http://openprovenance.org/var#}}operation']]
    // propagating for consumed2
    // URI: http://openprovenance.org/var#operation
    // Position: 1
    Integer l1a_6=mapLevel0.get("http://openprovenance.org/blank#n1." + ((QualifiedName)record[1]).getLocalPart());
    int l1b_6=(l1a_6==null)?-1:l1a_6;
    propagateTypes_n(record,mapLevelN,mapLevelNP1,6,8,9,l1b_6, uniqId);
    // 
    // 
    // Variable: produced
    // Count: 8
    // No successor for: 8
    // 
    // Variable: produced_type
    // Count: 9
    // No successor for: 9
    // 
    // 
  }

  public void propagateTypes_n(Object[] record, Map<String, Integer> mapLevelN,
      Map<String, Collection<int[]>> mapLevelNP1, Integer count, int successor, int genericRelation,
      int specificRelation, Map<String, Integer> uniqId) {
    // Generated by method org.openprovenance.prov.template.compiler.expansion.CompilerExpansionBuilder.generateTypePropagatorN_new()
    if (record[count]!=null) {
      String uri=((QualifiedName)(record[count])).getUri();
      Integer in_type=mapLevelN.get(uri);
      if (in_type!=null) {
        if (record[successor]!=null) {
          String uri2=((QualifiedName)(record[successor])).getUri();
          mapLevelNP1.computeIfAbsent(uri2, k -> new LinkedList<>());
          mapLevelNP1.get(uri2).add(new int[] { successor, genericRelation, specificRelation, in_type, count, uniqId.get(uri)});
        }
      }
    }
  }

  public static void main(String[] args) {
    // Generated by method org.openprovenance.prov.template.compiler.expansion.CompilerExpansionBuilder.generateMain()
    ProvFactory pf=org.openprovenance.prov.interop.InteropFramework.getDefaultFactory();
    Template_blockBuilder me=new Template_blockBuilder(pf);
    QualifiedName __var_agent=pf.newQualifiedName("http://example.org/","agent","ex");
    QualifiedName __var_produced=pf.newQualifiedName("http://example.org/","produced","ex");
    QualifiedName __var_b=pf.newQualifiedName("http://example.org/","b","ex");
    QualifiedName __var_consumed1=pf.newQualifiedName("http://example.org/","consumed1","ex");
    QualifiedName __var_consumed2=pf.newQualifiedName("http://example.org/","consumed2","ex");
    QualifiedName __var_operation=pf.newQualifiedName("http://example.org/","operation","ex");
    String __att_operation_type="test_operation_type";
    String __att_consumed_value1="test_consumed_value1";
    String __att_produced_value="12345";
    String __att_operation="test_operation";
    String __att_consumed_value2="12345";
    String __att_produced_type="test_produced_type";
    Document document=me.generator(__var_agent, __var_produced, __var_b, __var_consumed1, __var_consumed2, __var_operation, __att_operation_type, __att_consumed_value1, __att_produced_value, __att_consumed_value2, __att_produced_type);
    new org.openprovenance.prov.interop.InteropFramework().writeDocument(System.out,org.openprovenance.prov.interop.Formats.ProvFormat.PROVN,document);
    document=me.make("v0", "v1", "v2", "v3", "v4", "v5", 6, "v7", "v8", 9);
    new org.openprovenance.prov.interop.InteropFramework().writeDocument(System.out,org.openprovenance.prov.interop.Formats.ProvFormat.PROVN,document);
  }

  public Document make(String operation, String operation_type, String agent, String consumed1,
      String consumed_value1, String consumed2, Integer consumed_value2, String produced,
      String produced_type, Integer produced_value) {
    // Generated by method org.openprovenance.prov.template.compiler.expansion.CompilerExpansionBuilder.generateFactoryMethod()
    Document __C_document = null;
    Namespace __C_ns = new Namespace();
    StringSubstitutor subst= new StringSubstitutor(getVariableMap());
    __C_ns.register("ex",subst.replace("http://example.org/"));
    QualifiedName __var_agent=(agent==null)?null:__C_ns.stringToQualifiedName("ex:agent/" + agent + "",pf);
    QualifiedName __var_produced=(produced==null)?null:__C_ns.stringToQualifiedName("ex:" + produced + "",pf);
    QualifiedName __var_b=null;
    QualifiedName __var_consumed1=(consumed1==null)?null:__C_ns.stringToQualifiedName("ex:" + consumed1 + "",pf);
    QualifiedName __var_consumed2=(consumed2==null)?null:__C_ns.stringToQualifiedName("ex:" + consumed2 + "",pf);
    QualifiedName __var_operation=(operation==null)?null:__C_ns.stringToQualifiedName("ex:" + operation + "",pf);
    QualifiedName __att_operation_type=(operation_type==null)?null:__C_ns.stringToQualifiedName("ex:type/" + operation_type + "",pf);
    QualifiedName __att_produced_type=(produced_type==null)?null:__C_ns.stringToQualifiedName("ex:Result" + produced_type + "",pf);
    __C_document = generator(__var_agent, __var_produced, __var_b, __var_consumed1, __var_consumed2, __var_operation, __att_operation_type, consumed_value1, produced_value, consumed_value2, __att_produced_type);
    return __C_document;
  }

  public <T> T make(String operation, String operation_type, String agent, String consumed1,
      String consumed_value1, String consumed2, Integer consumed_value2, String produced,
      String produced_type, Integer produced_value, Template_blockBuilderInterface<T> processor) {
    // Generated by method org.openprovenance.prov.template.compiler.expansion.CompilerExpansionBuilder.generateFactoryMethodWithContinuation()
    T __C_result = null;
    Namespace __C_ns = new Namespace();
    StringSubstitutor subst= new StringSubstitutor(getVariableMap());
    __C_ns.register("ex",subst.replace("http://example.org/"));
    QualifiedName __var_agent=(agent==null)?null:__C_ns.stringToQualifiedName("ex:agent/" + agent + "",pf);
    QualifiedName __var_produced=(produced==null)?null:__C_ns.stringToQualifiedName("ex:" + produced + "",pf);
    QualifiedName __var_b=null;
    QualifiedName __var_consumed1=(consumed1==null)?null:__C_ns.stringToQualifiedName("ex:" + consumed1 + "",pf);
    QualifiedName __var_consumed2=(consumed2==null)?null:__C_ns.stringToQualifiedName("ex:" + consumed2 + "",pf);
    QualifiedName __var_operation=(operation==null)?null:__C_ns.stringToQualifiedName("ex:" + operation + "",pf);
    QualifiedName __att_operation_type=(operation_type==null)?null:__C_ns.stringToQualifiedName("ex:type/" + operation_type + "",pf);
    QualifiedName __att_produced_type=(produced_type==null)?null:__C_ns.stringToQualifiedName("ex:Result" + produced_type + "",pf);
    __C_result = processor.call(__var_operation, __att_operation_type, __var_agent, __var_consumed1, consumed_value1, __var_consumed2, consumed_value2, __var_produced, __att_produced_type, produced_value);
    return __C_result;
  }

  public Document make(Object[] record) {
    // Generated by method org.openprovenance.prov.template.compiler.expansion.CompilerExpansionBuilder.generateFactoryMethodWithArray()
    String operation=(String) record[1];
    String operation_type=(String) record[2];
    String agent=(String) record[3];
    String consumed1=(String) record[4];
    String consumed_value1=(String) record[5];
    String consumed2=(String) record[6];
    Integer consumed_value2=toInt(record[7]);
    String produced=(String) record[8];
    String produced_type=(String) record[9];
    Integer produced_value=toInt(record[10]);
    return make(operation, operation_type, agent, consumed1, consumed_value1, consumed2, consumed_value2, produced, produced_type, produced_value);
  }

  public <T> T make(Object[] record, Template_blockBuilderInterface<T> _processor) {
    // Generated by method org.openprovenance.prov.template.compiler.expansion.CompilerExpansionBuilder.generateFactoryMethodWithArrayAndContinuation()
    String operation=(String) record[1];
    String operation_type=(String) record[2];
    String agent=(String) record[3];
    String consumed1=(String) record[4];
    String consumed_value1=(String) record[5];
    String consumed2=(String) record[6];
    Integer consumed_value2=toInt(record[7]);
    String produced=(String) record[8];
    String produced_type=(String) record[9];
    Integer produced_value=toInt(record[10]);
    return make(operation, operation_type, agent, consumed1, consumed_value1, consumed2, consumed_value2, produced, produced_type, produced_value,_processor);
  }
}
