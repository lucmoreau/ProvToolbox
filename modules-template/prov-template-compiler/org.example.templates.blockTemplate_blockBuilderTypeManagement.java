// Generated automatically by ProvToolbox for template 'template_block'
// by class org.openprovenance.prov.template.compiler.expansion.CompilerTypeManagement, method generateTypeDeclaration_aux,
// in file CompilerTypeManagement.java, at line 105
package org.example.templates.block;

import java.lang.Object;
import java.lang.String;
import java.util.Collection;
import java.util.HashMap;
import java.util.HashSet;
import java.util.Map;
import java.util.Set;
import java.util.function.BiFunction;
import org.apache.commons.lang3.tuple.Pair;
import org.openprovenance.prov.model.ProvFactory;
import org.openprovenance.prov.model.QualifiedName;
import org.openprovenance.prov.template.log2prov.interfaces.TriFunction;

public class Template_blockBuilderTypeManagement<T> implements Template_blockBuilderInterface<T> {
  private ProvFactory pf;

  private Map<QualifiedName, Set<String>> knownTypeMap;

  private Map<QualifiedName, Set<String>> unknownTypeMap;

  private Map<String, Map<String, BiFunction<Object, String, Collection<String>>>> propertyConverters;

  private Map<QualifiedName, Map<String, Collection<String>>> idata;

  private Map<String, Map<String, TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>>>> idataConverters;

  public Template_blockBuilderTypeManagement(Map<QualifiedName, Set<String>> knownTypeMap,
      Map<QualifiedName, Set<String>> unknownTypeMap,
      Map<String, Map<String, BiFunction<Object, String, Collection<String>>>> propertyConverters,
      Map<QualifiedName, Map<String, Collection<String>>> idata,
      Map<String, Map<String, TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>>>> idataConverters) {
    this.knownTypeMap=knownTypeMap;
    this.unknownTypeMap=unknownTypeMap;
    this.propertyConverters=propertyConverters;
    this.idata=idata;
    this.idataConverters=idataConverters;
    this.pf=org.openprovenance.prov.interop.InteropFramework.getDefaultFactory();
  }

  public T call(QualifiedName operation, QualifiedName operation_type, QualifiedName agent,
      QualifiedName consumed1, Object consumed_value1, QualifiedName consumed2,
      Object consumed_value2, QualifiedName produced, QualifiedName produced_type,
      Object produced_value) {
    // Generated by method org.openprovenance.prov.template.compiler.expansion.CompilerTypeManagement.generateTypeDeclaration_aux()
    if (produced!=null)  {
      Map<String, BiFunction<Object, String, Collection<String>>> tmp_Conv0=propertyConverters.get("http://www.w3.org/ns/prov#Entity");
      if (tmp_Conv0!=null)  {
        BiFunction<Object, String, Collection<String>> tmp_Conv0_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl=tmp_Conv0.get("http://www.w3.org/ns/prov#type");
        if (tmp_Conv0_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl!=null)  {
          unknownTypeMap.computeIfAbsent(produced, k -> new HashSet<>());
          if (produced_type!=null) unknownTypeMap.get(produced).addAll(tmp_Conv0_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl.apply(produced_type, produced.getUri()));
        }
        BiFunction<Object, String, Collection<String>> tmp_Conv0_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ=tmp_Conv0.get("http://www.w3.org/ns/prov#value");
        if (tmp_Conv0_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ!=null)  {
          unknownTypeMap.computeIfAbsent(produced, k -> new HashSet<>());
          if (produced_value!=null) unknownTypeMap.get(produced).addAll(tmp_Conv0_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ.apply(produced_value, produced.getUri()));
        }
      }
    }
    if (produced!=null)  {
      Map<String, TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>>> itmp_Conv0=null;;
      if ((itmp_Conv0==null)&&(produced_type!=null)) itmp_Conv0=idataConverters.get(produced_type.getUri());
      if (itmp_Conv0==null) itmp_Conv0=idataConverters.get("http://www.w3.org/ns/prov#Entity");
      if (itmp_Conv0!=null)  {
        TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>> itmp_Conv0_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl=itmp_Conv0.get("http://www.w3.org/ns/prov#type");
        if (itmp_Conv0_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl!=null)  {
          idata.computeIfAbsent(produced, k -> new HashMap<>());
          if /* option 2 */ (produced_type!=null) {
            Collection<Pair<String, Collection<String>>> p=itmp_Conv0_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl.apply(produced_type,  produced.getUri(), "http://www.w3.org/ns/prov#type");
            p.forEach(p2 ->  {
              idata.get(produced).computeIfAbsent(p2.getLeft(), k -> new HashSet<>());
              idata.get(produced).get(p2.getLeft()).addAll(p2.getRight());
            } );
          }
        }
        TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>> itmp_Conv0_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ=itmp_Conv0.get("http://www.w3.org/ns/prov#value");
        if (itmp_Conv0_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ!=null)  {
          idata.computeIfAbsent(produced, k -> new HashMap<>());
          if /* option 2 */ (produced_value!=null) {
            Collection<Pair<String, Collection<String>>> p=itmp_Conv0_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ.apply(produced_value,  produced.getUri(), "http://www.w3.org/ns/prov#value");
            p.forEach(p2 ->  {
              idata.get(produced).computeIfAbsent(p2.getLeft(), k -> new HashSet<>());
              idata.get(produced).get(p2.getLeft()).addAll(p2.getRight());
            } );
          }
        }
        TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>> itmp_Conv0_aHR0cDovL29wZW5wcm92ZW5hbmNlLm9yZy9wcm92L2V4dGVuc2lvbiNpZA=itmp_Conv0.get("http://openprovenance.org/prov/extension#id");
        if (itmp_Conv0_aHR0cDovL29wZW5wcm92ZW5hbmNlLm9yZy9wcm92L2V4dGVuc2lvbiNpZA!=null)  {
          idata.computeIfAbsent(produced, k -> new HashMap<>());
          if /* option 2 */ (produced!=null) {
            Collection<Pair<String, Collection<String>>> p=itmp_Conv0_aHR0cDovL29wZW5wcm92ZW5hbmNlLm9yZy9wcm92L2V4dGVuc2lvbiNpZA.apply(produced,  produced.getUri(), "http://openprovenance.org/prov/extension#id");
            p.forEach(p2 ->  {
              idata.get(produced).computeIfAbsent(p2.getLeft(), k -> new HashSet<>());
              idata.get(produced).get(p2.getLeft()).addAll(p2.getRight());
            } );
          }
        }
      }
    }
    if (consumed1!=null)  {
      Map<String, BiFunction<Object, String, Collection<String>>> tmp_Conv1=propertyConverters.get("http://www.w3.org/ns/prov#Entity");
      if (tmp_Conv1!=null)  {
        BiFunction<Object, String, Collection<String>> tmp_Conv1_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ=tmp_Conv1.get("http://www.w3.org/ns/prov#value");
        if (tmp_Conv1_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ!=null)  {
          unknownTypeMap.computeIfAbsent(consumed1, k -> new HashSet<>());
          if (consumed_value1!=null) unknownTypeMap.get(consumed1).addAll(tmp_Conv1_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ.apply(consumed_value1, consumed1.getUri()));
        }
      }
    }
    if (consumed1!=null)  {
      Map<String, TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>>> itmp_Conv1=null;;
      if (itmp_Conv1==null) itmp_Conv1=idataConverters.get("http://www.w3.org/ns/prov#Entity");
      if (itmp_Conv1!=null)  {
        TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>> itmp_Conv1_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ=itmp_Conv1.get("http://www.w3.org/ns/prov#value");
        if (itmp_Conv1_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ!=null)  {
          idata.computeIfAbsent(consumed1, k -> new HashMap<>());
          if /* option 2 */ (consumed_value1!=null) {
            Collection<Pair<String, Collection<String>>> p=itmp_Conv1_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ.apply(consumed_value1,  consumed1.getUri(), "http://www.w3.org/ns/prov#value");
            p.forEach(p2 ->  {
              idata.get(consumed1).computeIfAbsent(p2.getLeft(), k -> new HashSet<>());
              idata.get(consumed1).get(p2.getLeft()).addAll(p2.getRight());
            } );
          }
        }
        TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>> itmp_Conv1_aHR0cDovL29wZW5wcm92ZW5hbmNlLm9yZy9wcm92L2V4dGVuc2lvbiNpZA=itmp_Conv1.get("http://openprovenance.org/prov/extension#id");
        if (itmp_Conv1_aHR0cDovL29wZW5wcm92ZW5hbmNlLm9yZy9wcm92L2V4dGVuc2lvbiNpZA!=null)  {
          idata.computeIfAbsent(consumed1, k -> new HashMap<>());
          if /* option 2 */ (consumed1!=null) {
            Collection<Pair<String, Collection<String>>> p=itmp_Conv1_aHR0cDovL29wZW5wcm92ZW5hbmNlLm9yZy9wcm92L2V4dGVuc2lvbiNpZA.apply(consumed1,  consumed1.getUri(), "http://openprovenance.org/prov/extension#id");
            p.forEach(p2 ->  {
              idata.get(consumed1).computeIfAbsent(p2.getLeft(), k -> new HashSet<>());
              idata.get(consumed1).get(p2.getLeft()).addAll(p2.getRight());
            } );
          }
        }
      }
    }
    if (consumed2!=null)  {
      Map<String, BiFunction<Object, String, Collection<String>>> tmp_Conv2=propertyConverters.get("http://www.w3.org/ns/prov#Entity");
      if (tmp_Conv2!=null)  {
        BiFunction<Object, String, Collection<String>> tmp_Conv2_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ=tmp_Conv2.get("http://www.w3.org/ns/prov#value");
        if (tmp_Conv2_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ!=null)  {
          unknownTypeMap.computeIfAbsent(consumed2, k -> new HashSet<>());
          if (consumed_value2!=null) unknownTypeMap.get(consumed2).addAll(tmp_Conv2_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ.apply(consumed_value2, consumed2.getUri()));
        }
      }
    }
    if (consumed2!=null)  {
      Map<String, TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>>> itmp_Conv2=null;;
      if (itmp_Conv2==null) itmp_Conv2=idataConverters.get("http://www.w3.org/ns/prov#Entity");
      if (itmp_Conv2!=null)  {
        TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>> itmp_Conv2_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ=itmp_Conv2.get("http://www.w3.org/ns/prov#value");
        if (itmp_Conv2_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ!=null)  {
          idata.computeIfAbsent(consumed2, k -> new HashMap<>());
          if /* option 2 */ (consumed_value2!=null) {
            Collection<Pair<String, Collection<String>>> p=itmp_Conv2_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN2YWx1ZQ.apply(consumed_value2,  consumed2.getUri(), "http://www.w3.org/ns/prov#value");
            p.forEach(p2 ->  {
              idata.get(consumed2).computeIfAbsent(p2.getLeft(), k -> new HashSet<>());
              idata.get(consumed2).get(p2.getLeft()).addAll(p2.getRight());
            } );
          }
        }
        TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>> itmp_Conv2_aHR0cDovL29wZW5wcm92ZW5hbmNlLm9yZy9wcm92L2V4dGVuc2lvbiNpZA=itmp_Conv2.get("http://openprovenance.org/prov/extension#id");
        if (itmp_Conv2_aHR0cDovL29wZW5wcm92ZW5hbmNlLm9yZy9wcm92L2V4dGVuc2lvbiNpZA!=null)  {
          idata.computeIfAbsent(consumed2, k -> new HashMap<>());
          if /* option 2 */ (consumed2!=null) {
            Collection<Pair<String, Collection<String>>> p=itmp_Conv2_aHR0cDovL29wZW5wcm92ZW5hbmNlLm9yZy9wcm92L2V4dGVuc2lvbiNpZA.apply(consumed2,  consumed2.getUri(), "http://openprovenance.org/prov/extension#id");
            p.forEach(p2 ->  {
              idata.get(consumed2).computeIfAbsent(p2.getLeft(), k -> new HashSet<>());
              idata.get(consumed2).get(p2.getLeft()).addAll(p2.getRight());
            } );
          }
        }
      }
    }
    if (operation!=null)  {
      Map<String, BiFunction<Object, String, Collection<String>>> tmp_Conv3=propertyConverters.get("http://www.w3.org/ns/prov#Activity");
      if (tmp_Conv3!=null)  {
        BiFunction<Object, String, Collection<String>> tmp_Conv3_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl=tmp_Conv3.get("http://www.w3.org/ns/prov#type");
        if (tmp_Conv3_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl!=null)  {
          unknownTypeMap.computeIfAbsent(operation, k -> new HashSet<>());
          if (operation_type!=null) unknownTypeMap.get(operation).addAll(tmp_Conv3_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl.apply(operation_type, operation.getUri()));
        }
      }
    }
    if (operation!=null)  {
      Map<String, TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>>> itmp_Conv3=null;;
      if ((itmp_Conv3==null)&&(operation_type!=null)) itmp_Conv3=idataConverters.get(operation_type.getUri());
      if (itmp_Conv3==null) itmp_Conv3=idataConverters.get("http://www.w3.org/ns/prov#Activity");
      if (itmp_Conv3!=null)  {
        TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>> itmp_Conv3_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl=itmp_Conv3.get("http://www.w3.org/ns/prov#type");
        if (itmp_Conv3_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl!=null)  {
          idata.computeIfAbsent(operation, k -> new HashMap<>());
          if /* option 2 */ (operation_type!=null) {
            Collection<Pair<String, Collection<String>>> p=itmp_Conv3_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl.apply(operation_type,  operation.getUri(), "http://www.w3.org/ns/prov#type");
            p.forEach(p2 ->  {
              idata.get(operation).computeIfAbsent(p2.getLeft(), k -> new HashSet<>());
              idata.get(operation).get(p2.getLeft()).addAll(p2.getRight());
            } );
          }
        }
        TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>> itmp_Conv3_aHR0cDovL29wZW5wcm92ZW5hbmNlLm9yZy9wcm92L2V4dGVuc2lvbiNpZA=itmp_Conv3.get("http://openprovenance.org/prov/extension#id");
        if (itmp_Conv3_aHR0cDovL29wZW5wcm92ZW5hbmNlLm9yZy9wcm92L2V4dGVuc2lvbiNpZA!=null)  {
          idata.computeIfAbsent(operation, k -> new HashMap<>());
          if /* option 2 */ (operation!=null) {
            Collection<Pair<String, Collection<String>>> p=itmp_Conv3_aHR0cDovL29wZW5wcm92ZW5hbmNlLm9yZy9wcm92L2V4dGVuc2lvbiNpZA.apply(operation,  operation.getUri(), "http://openprovenance.org/prov/extension#id");
            p.forEach(p2 ->  {
              idata.get(operation).computeIfAbsent(p2.getLeft(), k -> new HashSet<>());
              idata.get(operation).get(p2.getLeft()).addAll(p2.getRight());
            } );
          }
        }
      }
    }
    if (agent!=null)  {
      Map<String, BiFunction<Object, String, Collection<String>>> tmp_Conv4=propertyConverters.get("http://www.w3.org/ns/prov#Agent");
      if (tmp_Conv4!=null)  {
        BiFunction<Object, String, Collection<String>> tmp_Conv4_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl=tmp_Conv4.get("http://www.w3.org/ns/prov#type");
        if (tmp_Conv4_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl!=null)  {
          knownTypeMap.computeIfAbsent(agent, k -> new HashSet<>());
          knownTypeMap.get(agent).addAll(tmp_Conv4_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl.apply("http://www.w3.org/ns/prov#Agent",agent.getUri()));
        }
      }
    }
    if (agent!=null)  {
      Map<String, TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>>> itmp_Conv4=null;;
      if (itmp_Conv4==null) itmp_Conv4=idataConverters.get("http://www.w3.org/ns/prov#Agent");
      if (itmp_Conv4!=null)  {
        TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>> itmp_Conv4_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl=itmp_Conv4.get("http://www.w3.org/ns/prov#type");
        if (itmp_Conv4_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl!=null)  {
          // option 3;
          idata.computeIfAbsent(agent, k -> new HashMap<>());
          Collection<Pair<String, Collection<String>>> p=itmp_Conv4_aHR0cDovL3d3dy53My5vcmcvbnMvcHJvdiN0eXBl.apply("http://www.w3.org/ns/prov#type",  agent.getUri(), "http://www.w3.org/ns/prov#type");
          p.forEach(p2 ->  {
            idata.get(agent).computeIfAbsent(p2.getLeft(), k -> new HashSet<>());
            idata.get(agent).get(p2.getLeft()).addAll(p2.getRight());
          } );
        }
        TriFunction<Object, String, String, Collection<Pair<String, Collection<String>>>> itmp_Conv4_aHR0cDovL29wZW5wcm92ZW5hbmNlLm9yZy9wcm92L2V4dGVuc2lvbiNpZA=itmp_Conv4.get("http://openprovenance.org/prov/extension#id");
        if (itmp_Conv4_aHR0cDovL29wZW5wcm92ZW5hbmNlLm9yZy9wcm92L2V4dGVuc2lvbiNpZA!=null)  {
          idata.computeIfAbsent(agent, k -> new HashMap<>());
          if /* option 2 */ (agent!=null) {
            Collection<Pair<String, Collection<String>>> p=itmp_Conv4_aHR0cDovL29wZW5wcm92ZW5hbmNlLm9yZy9wcm92L2V4dGVuc2lvbiNpZA.apply(agent,  agent.getUri(), "http://openprovenance.org/prov/extension#id");
            p.forEach(p2 ->  {
              idata.get(agent).computeIfAbsent(p2.getLeft(), k -> new HashSet<>());
              idata.get(agent).get(p2.getLeft()).addAll(p2.getRight());
            } );
          }
        }
      }
    }
    // wdf http://openprovenance.org/blank#n0
    QualifiedName _tmp_n0=pf.newQualifiedName("http://openprovenance.org/blank#","n0."+operation.getLocalPart(),"bn");
    knownTypeMap.computeIfAbsent(_tmp_n0, k -> new HashSet<>());
    knownTypeMap.get(_tmp_n0).add("http://www.w3.org/ns/prov#WasDerivedFrom");
    unknownTypeMap.computeIfAbsent(_tmp_n0, k -> new HashSet<>());
    unknownTypeMap.get(_tmp_n0).add(operation_type.getUri());
    knownTypeMap.get(_tmp_n0).add("http://example.org/DerivationConsumed1");
    // wdf http://openprovenance.org/blank#n1
    QualifiedName _tmp_n1=pf.newQualifiedName("http://openprovenance.org/blank#","n1."+operation.getLocalPart(),"bn");
    knownTypeMap.computeIfAbsent(_tmp_n1, k -> new HashSet<>());
    knownTypeMap.get(_tmp_n1).add("http://www.w3.org/ns/prov#WasDerivedFrom");
    unknownTypeMap.computeIfAbsent(_tmp_n1, k -> new HashSet<>());
    unknownTypeMap.get(_tmp_n1).add(operation_type.getUri());
    knownTypeMap.get(_tmp_n1).add("http://example.org/DerivationConsumed2");
    // Declare agent
    if (agent!=null)  {
      knownTypeMap.computeIfAbsent(agent, k -> new HashSet<>());
      knownTypeMap.get(agent).add("http://www.w3.org/ns/prov#Agent");
    }
    // Declare produced
    if (produced!=null)  {
      knownTypeMap.computeIfAbsent(produced, k -> new HashSet<>());
      knownTypeMap.get(produced).add("http://www.w3.org/ns/prov#Entity");
    }
    if (produced!=null)  {
      // http://openprovenance.org/var#produced_type
      if (produced_type!=null)  {
        unknownTypeMap.computeIfAbsent(produced, k -> new HashSet<>());
        unknownTypeMap.get(produced).add(((QualifiedName)produced_type).getUri());
      }
    }
    // Declare consumed1
    if (consumed1!=null)  {
      knownTypeMap.computeIfAbsent(consumed1, k -> new HashSet<>());
      knownTypeMap.get(consumed1).add("http://www.w3.org/ns/prov#Entity");
    }
    // Declare consumed2
    if (consumed2!=null)  {
      knownTypeMap.computeIfAbsent(consumed2, k -> new HashSet<>());
      knownTypeMap.get(consumed2).add("http://www.w3.org/ns/prov#Entity");
    }
    // Declare operation
    if (operation!=null)  {
      knownTypeMap.computeIfAbsent(operation, k -> new HashSet<>());
      knownTypeMap.get(operation).add("http://www.w3.org/ns/prov#Activity");
    }
    if (operation!=null)  {
      // http://openprovenance.org/var#operation_type
      if (operation_type!=null)  {
        unknownTypeMap.computeIfAbsent(operation, k -> new HashSet<>());
        unknownTypeMap.get(operation).add(((QualifiedName)operation_type).getUri());
      }
    }
    return null;
  }
}
