package org.openprovenance.prov.template.compiler.integration;

import com.squareup.javapoet.ClassName;
import com.squareup.javapoet.JavaFile;
import com.squareup.javapoet.MethodSpec;
import com.squareup.javapoet.TypeSpec;
import org.openprovenance.prov.template.compiler.CompilerUtil;
import org.openprovenance.prov.template.compiler.common.BeanDirection;
import org.openprovenance.prov.template.compiler.common.CompilerCommon;
import org.openprovenance.prov.template.compiler.common.Constants;
import org.openprovenance.prov.template.descriptors.TemplateBindingsSchema;

import javax.lang.model.element.Modifier;


public class CompilerIntegrator {
    private final CompilerCommon compilerCommon;
    private final CompilerUtil compilerUtil = new CompilerUtil();
    private final boolean debugComment = true;

    public CompilerIntegrator(CompilerCommon compilerCommon) {
        this.compilerCommon = compilerCommon;

    }

    public JavaFile generateIntegrator(String templateName, String integrator_package, TemplateBindingsSchema bindingsSchema) {

        TypeSpec.Builder builder = compilerUtil.generateClassInit(compilerUtil.integratorBuilderNameClass(templateName));


        builder.addMethod(compilerCommon.generateProcessorConverter(templateName, integrator_package, bindingsSchema, BeanDirection.OUTPUTS));

        builder.addMethod(compilerCommon.generateNameAccessor(templateName));

        builder.addField(compilerCommon.generateField4aBeanConverter2("toInputs", templateName, integrator_package, Constants.A_RECORD_INPUTS_CONVERTER, BeanDirection.INPUTS));

        builder.addMethod(compilerCommon.generateFactoryMethodToBeanWithArray("toInputs", templateName, integrator_package, bindingsSchema, BeanDirection.INPUTS));


        builder.addMethod(generateNewOutputConstructor(templateName, integrator_package, bindingsSchema, BeanDirection.OUTPUTS));

        TypeSpec spec = builder.build();

        return compilerUtil.specWithComment(spec, templateName, integrator_package, getClass().getName());
    }

    public MethodSpec generateNewOutputConstructor(String templateName, String packge, TemplateBindingsSchema bindingsSchema, BeanDirection outputs) {
        MethodSpec.Builder builder = MethodSpec.methodBuilder("newOutput")
                .addModifiers(Modifier.PUBLIC)
                .returns(ClassName.get(packge, compilerUtil.outputsNameClass(templateName)));
        if (debugComment)
            builder.addComment("Generated by method $N", getClass().getName() + ".generateNewOutputConstructor()");
        //builder.addTypeVariable(typeOutput);
        builder.addStatement("return new $N()", compilerUtil.outputsNameClass(templateName));


        return builder.build();

    }


}
