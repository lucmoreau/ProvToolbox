// Generated automatically by ProvToolbox for template configuration 'template_library'
// by class org.openprovenance.prov.template.compiler.CompilerBeanCompleter2, method generateBeanCompleter2,
// in file CompilerBeanCompleter2.java, at line 24
package org.openprovenance.prov.template.library.ptm.client.integrator;

import java.util.Map;

public class BeanCompleter2 {
  final Map<String, Object> m;

  final Getter getter;

  public BeanCompleter2(Map<String, Object> m) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerBeanCompleter2, method generateBeanCompleter2
    // in file CompilerBeanCompleter2.java, at line 60
    this.m = m;
    // The following code implements this assignment, in a way that jsweet can compile
    // this.getter = this::getMap
    this.getter = new Getter() {
      public <T> T get(Class<T> cl, String col) {
        return getMap(cl, col);
      }
    };
  }

  public BeanCompleter2(Getter getter) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerBeanCompleter2, method generateBeanCompleter2
    // in file CompilerBeanCompleter2.java, at line 82
    this.m = null;
    this.getter = (Getter) getter;
  }

  public <T> T getMap(Class<T> cl, String key) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerBeanCompleter2, method generateBeanCompleter2
    // in file CompilerBeanCompleter2.java, at line 36
    return (T) m.get(key);
  }

  public Ptm_expandingOutputs process(Ptm_expandingOutputs bean) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerBeanCompleter2, method createProcessMethod
    // in file CompilerBeanCompleter2.java, at line 156
    bean.ID= getter.get(Integer.class,"ID");
    bean.document= getter.get(String.class,"document");
    bean.expanding= getter.get(Integer.class,"expanding");
    return bean;
  }

  public Ptm_expandingInputs process(Ptm_expandingInputs bean) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerBeanCompleter2, method createProcessMethod
    // in file CompilerBeanCompleter2.java, at line 156
    bean.template= getter.get(String.class,"template");
    bean.bindings= getter.get(String.class,"bindings");
    bean.agent= getter.get(Integer.class,"agent");
    bean.email= getter.get(String.class,"email");
    bean.time= getter.get(String.class,"time");
    return bean;
  }

  public Ptm_mexpandingOutputs process(Ptm_mexpandingOutputs bean) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerBeanCompleter2, method createProcessMethod
    // in file CompilerBeanCompleter2.java, at line 156
    bean.ID= getter.get(Integer.class,"ID");
    bean.template= getter.get(String.class,"template");
    bean.mexpanding= getter.get(Integer.class,"mexpanding");
    return bean;
  }

  public Ptm_mexpandingInputs process(Ptm_mexpandingInputs bean) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerBeanCompleter2, method createProcessMethod
    // in file CompilerBeanCompleter2.java, at line 156
    bean.mtemplate= getter.get(String.class,"mtemplate");
    bean.bindings= getter.get(String.class,"bindings");
    bean.agent= getter.get(Integer.class,"agent");
    bean.email= getter.get(String.class,"email");
    bean.time= getter.get(String.class,"time");
    return bean;
  }

  public boolean next() {
    return true;
  }

  public interface Getter {
    <T> T get(Class<T> cl, String col);
  }
}
