// Generated automatically by ProvToolbox for template configuration 'template_library'
// by class org.openprovenance.prov.template.compiler.CompilerBeanEnactor, method generateBeanEnactor,
// in file CompilerBeanEnactor.java, at line 26
package org.openprovenance.prov.template.library.ptm_copy.client.common;

import java.util.function.BiConsumer;
import java.util.function.Consumer;

public abstract class BeanEnactor<RESULT> implements BeanProcessor {
  protected final BeanProcessor checker;

  protected final EnactorImplementation<RESULT> realiser;

  public BeanEnactor(EnactorImplementation<RESULT> realiser, BeanProcessor checker) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerBeanEnactor, method generateBeanEnactor
    // in file CompilerBeanEnactor.java, at line 83
    this.realiser = realiser;
    this.checker = checker;
  }

  public final Ptm_expandingBean process(Ptm_expandingBean bean) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerBeanEnactor, method generateBeanEnactor
    // in file CompilerBeanEnactor.java, at line 102
    return realiser.generic_enact(bean,
                        b -> checker.process(b),
                        (sb,b) -> new QueryInvoker(sb).process(b),
                        (rs,b) -> realiser.beanCompleterFactory(rs).process(b));
  }

  public final Ptm_mexpandingBean process(Ptm_mexpandingBean bean) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerBeanEnactor, method generateBeanEnactor
    // in file CompilerBeanEnactor.java, at line 102
    return realiser.generic_enact(bean,
                        b -> checker.process(b),
                        (sb,b) -> new QueryInvoker(sb).process(b),
                        (rs,b) -> realiser.beanCompleterFactory(rs).process(b));
  }

  public interface EnactorImplementation<RESULT> {
    <T> T generic_enact(T bean, Consumer<T> checker, BiConsumer<StringBuilder, T> queryInvoker,
        BiConsumer<RESULT, T> completeBean);

    BeanCompleter beanCompleterFactory(RESULT rs);
  }
}
