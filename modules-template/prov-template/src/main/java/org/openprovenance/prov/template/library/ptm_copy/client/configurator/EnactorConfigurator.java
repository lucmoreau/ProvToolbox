// Generated automatically by ProvToolbox for template configuration 'template_library'
// by class org.openprovenance.prov.template.compiler.CompilerConfigurations, method generateConfigurator,
// in file CompilerConfigurations.java, at line 62
package org.openprovenance.prov.template.library.ptm_copy.client.configurator;

import org.openprovenance.prov.client_copy.ProcessorArgsInterface;
import org.openprovenance.prov.template.library.ptm_copy.client.common.*;

public class EnactorConfigurator implements TableConfigurator<ProcessorArgsInterface<?>> {
  private final BeanProcessor beanEnactor;

  public EnactorConfigurator(BeanProcessor beanEnactor) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerConfigurations, method generateConfigurator
    // in file CompilerConfigurations.java, at line 77
    this.beanEnactor=beanEnactor;
  }

  public final ProcessorArgsInterface<?> ptm_expanding(Ptm_expandingBuilder builder) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerConfigurations, method generateConfigurator
    // in file CompilerConfigurations.java, at line 97
    ProcessorArgsInterface<Ptm_expandingBean> beanConverter=builder.aRecord2BeanConverter;
    ProcessorArgsInterface<Ptm_expandingBean> enactor=(array) -> {
                            Ptm_expandingBean bean=beanConverter.process(array);
                            return beanEnactor.process(bean);
                        };
    return enactor;
  }

  public final ProcessorArgsInterface<?> ptm_mexpanding(Ptm_mexpandingBuilder builder) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerConfigurations, method generateConfigurator
    // in file CompilerConfigurations.java, at line 97
    ProcessorArgsInterface<Ptm_mexpandingBean> beanConverter=builder.aRecord2BeanConverter;
    ProcessorArgsInterface<Ptm_mexpandingBean> enactor=(array) -> {
                            Ptm_mexpandingBean bean=beanConverter.process(array);
                            return beanEnactor.process(bean);
                        };
    return enactor;
  }
}
