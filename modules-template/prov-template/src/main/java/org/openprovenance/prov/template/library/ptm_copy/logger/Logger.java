// Generated automatically by ProvToolbox for template configuration 'template_library'
// by class org.openprovenance.prov.template.compiler.CompilerLogger, method generateLogger,
// in file CompilerLogger.java, at line 30
package org.openprovenance.prov.template.library.ptm_copy.logger;

import org.openprovenance.prov.client_copy.Builder;
import org.openprovenance.prov.client_copy.LoggerInterface;
import org.openprovenance.prov.client_copy.ProcessorArgsInterface;
import org.openprovenance.prov.template.library.ptm_copy.client.common.Ptm_expandingBean;
import org.openprovenance.prov.template.library.ptm_copy.client.common.Ptm_expandingBuilder;
import org.openprovenance.prov.template.library.ptm_copy.client.common.Ptm_mexpandingBean;
import org.openprovenance.prov.template.library.ptm_copy.client.common.Ptm_mexpandingBuilder;
import org.openprovenance.prov.template.library.ptm_copy.client.configurator.BuilderConfigurator;
import org.openprovenance.prov.template.library.ptm_copy.client.configurator.CompositeTableConfigurator;
import org.openprovenance.prov.template.library.ptm_copy.client.configurator.ConverterConfigurator;
import org.openprovenance.prov.template.library.ptm_copy.client.configurator.TableConfigurator;

import java.util.HashMap;
import java.util.Map;

public class Logger implements LoggerInterface {
  public static final Ptm_expandingBuilder ___ptm_expanding = new Ptm_expandingBuilder();

  public static final Ptm_mexpandingBuilder ___ptm_mexpanding = new Ptm_mexpandingBuilder();

  public static final Builder[] __builders = new Builder[] {___ptm_expanding, ___ptm_mexpanding};

  public static Map<String, Builder> simpleBuilders = initializeBeanTable(new BuilderConfigurator());

  public static Map<String, ProcessorArgsInterface<?>> simpleBeanConverters = initializeBeanTable(new ConverterConfigurator());

  public Builder[] getBuilders() {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerLogger, method generateGetBuilderMethod
    // in file CompilerLogger.java, at line 296
    return __builders;
  }

  /**
   * TODO doc.
   *
   * @param document The document resulting from template expansion (expected type: xsd:string)
   * @param provenance The provenance of the document resulting from the template expansion (expected type: xsd:string)
   * @param template The template to be expanded (expected type: xsd:string)
   * @param bindings The bindings used in expansion (expected type: xsd:string)
   * @param agent The agent controlling the expansion (expected type: xsd:int)
   * @param expanding The activity of expanding the template (expected type: xsd:int)
   * @param email The agent's email (expected type: xsd:string)
   * @param time Time when the transformed file is created (expected type: xsd:dateTime)
   * @return not documented.
   */
  public static String logPtm_expanding(String document, String provenance, String template,
      String bindings, Integer agent, Integer expanding, String email, String time) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerLogger, method generateStaticLogMethod
    // in file CompilerLogger.java, at line 232
    return ___ptm_expanding.args2csv().process(document, provenance, template, bindings, agent, expanding, email, time);
  }

  /**
   * TODO doc.
   *
   * @param document The document resulting from template expansion (expected type: xsd:string)
   * @param provenance The provenance of the document resulting from the template expansion (expected type: xsd:string)
   * @param template The template to be expanded (expected type: xsd:string)
   * @param bindings The bindings used in expansion (expected type: xsd:string)
   * @param agent The agent controlling the expansion (expected type: xsd:int)
   * @param expanding The activity of expanding the template (expected type: xsd:int)
   * @param email The agent's email (expected type: xsd:string)
   * @param time Time when the transformed file is created (expected type: xsd:dateTime)
   * @return not documented.
   */
  public static Ptm_expandingBean beanPtm_expanding(String document, String provenance,
                                                    String template, String bindings, Integer agent, Integer expanding, String email,
                                                    String time) {
    return ___ptm_expanding.aArgs2BeanConverter.process(document, provenance, template, bindings, agent, expanding, email, time);
  }

  /**
   * TODO doc.
   *
   * @param template The template resulting from the mtemplate expansion (expected type: xsd:string)
   * @param provenance The provenance of the document resulting from the template expansion (expected type: xsd:string)
   * @param mtemplate The meta template to be expanded (expected type: xsd:string)
   * @param bindings The bindings used in expansion (expected type: xsd:string)
   * @param agent The agent controlling the expansion (expected type: xsd:int)
   * @param mexpanding The activity of expanding the template (expected type: xsd:int)
   * @param email The agent's email (expected type: xsd:string)
   * @param time Time when the transformed file is created (expected type: xsd:dateTime)
   * @return not documented.
   */
  public static String logPtm_mexpanding(String template, String provenance, String mtemplate,
      String bindings, Integer agent, Integer mexpanding, String email, String time) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerLogger, method generateStaticLogMethod
    // in file CompilerLogger.java, at line 232
    return ___ptm_mexpanding.args2csv().process(template, provenance, mtemplate, bindings, agent, mexpanding, email, time);
  }

  /**
   * TODO doc.
   *
   * @param template The template resulting from the mtemplate expansion (expected type: xsd:string)
   * @param provenance The provenance of the document resulting from the template expansion (expected type: xsd:string)
   * @param mtemplate The meta template to be expanded (expected type: xsd:string)
   * @param bindings The bindings used in expansion (expected type: xsd:string)
   * @param agent The agent controlling the expansion (expected type: xsd:int)
   * @param mexpanding The activity of expanding the template (expected type: xsd:int)
   * @param email The agent's email (expected type: xsd:string)
   * @param time Time when the transformed file is created (expected type: xsd:dateTime)
   * @return not documented.
   */
  public static Ptm_mexpandingBean beanPtm_mexpanding(String template, String provenance,
      String mtemplate, String bindings, Integer agent, Integer mexpanding, String email,
      String time) {
    return ___ptm_mexpanding.aArgs2BeanConverter.process(template, provenance, mtemplate, bindings, agent, mexpanding, email, time);
  }

  public static <T> Map<String, T> initializeBeanTable(TableConfigurator<T> configurator) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerLogger, method generateInitializeBeanTableMethod
    // in file CompilerLogger.java, at line 108
    Map<String, T> aTable=new HashMap<String, T>();
    aTable.put(___ptm_expanding.getName(),configurator.ptm_expanding(___ptm_expanding));
    aTable.put(___ptm_mexpanding.getName(),configurator.ptm_mexpanding(___ptm_mexpanding));
    return aTable;
  }

  public static <T> Map<String, T> initializeCompositeBeanTable(
      CompositeTableConfigurator<T> configurator) {
    // Generated by class org.openprovenance.prov.template.compiler.CompilerLogger, method generateInitializeCompositeBeanTableMethod
    // in file CompilerLogger.java, at line 135
    Map<String, T> aTable=new HashMap<String, T>();
    return aTable;
  }
}
